seu.emat <- emat[,which(colnames(emat) %in% colnames(subset@assays$RNA)), drop=FALSE]
seu.nmat <- nmat[,which(colnames(nmat) %in% colnames(subset@assays$RNA)), drop=FALSE]
seu.emat <- seu.emat[which(rownames(seu.emat) %in% rownames(seu.nmat)),, drop = FALSE]
seu.nmat <- seu.nmat[which(rownames(seu.nmat) %in% rownames(seu.emat)),, drop = FALSE]
seu.nmat <- seu.nmat[match(rownames(seu.emat), rownames(seu.nmat)),]
if (!identical(colnames(seu.emat), colnames(seu.nmat), FALSE, FALSE, FALSE, FALSE)) {
stop("Process failed: colnames not identical")
}
if(!identical(rownames(seu.emat), rownames(seu.nmat), FALSE, FALSE, FALSE, FALSE)) {
stop("Process failed: rownames not identical")
}
#seu.obs <- as.data.frame(cbind(subset@meta.data$orig.ident, subset@meta.data$seurat_clusters, subset@meta.data$cell.type))
seu.obs <- subset@meta.data[,colnames(subset@meta.data) %in% obs.vars]
colnames(seu.obs)[grep("seurat_clusters", colnames(seu.obs))] <- "clusters"
#colnames(seu.obs) <- obs.vars
rownames(seu.obs) <- rownames(subset@meta.data)
seu.obs <- seu.obs[match(colnames(seu.emat), rownames(seu.obs)),]
seu.obsm <- as.data.frame(Embeddings(subset, reduction = "umap"))
seu.obsm <- seu.obsm[match(colnames(seu.emat), rownames(seu.obsm)),]
seu.obs_names <- as.data.frame(colnames(seu.emat))
seu.var_names <- as.data.frame(rownames(seu.emat))
writeMM(t(seu.emat), file = paste0(dir,name,".emat.mtx"))
writeMM(t(seu.nmat), file = paste0(dir,name,".nmat.mtx"))
write.csv(seu.obs, file =  paste0(dir,name,".obs.csv"), row.names = FALSE)
write.csv(seu.obsm, file =  paste0(dir,name,".obsm.csv"), row.names = FALSE)
write.table(seu.obs_names, file = paste0(dir,name,".obs_names.txt"), row.names = FALSE, col.names = FALSE)
write.table(seu.var_names, file = paste0(dir,name,".var_names.txt"), row.names = FALSE, col.names = FALSE)
message("Finished writing data")
}
ID.covid.markers <- function(seu = covid_combined.nc, idents = NULL, p.cutoff = 0.05){
markers.list <- list()
sub <- subset(covid_combined.nc, idents = idents)
donors.2 <- unique(covid_combined.nc$Donor.full)[-grep("^H",
unique(covid_combined.nc$Donor.full))]
for (k in 1:length(donors.2)) {
try({
markers <- subset(sub, cells = c(grep(donors.2[k],
sub$Donor.full),
grep("Healthy",
sub$Status))) %>%
FindMarkers(ident.1 = "COVID", group.by = "Status") %>% rownames_to_column(var = "gene") %>%
add_column(Donor = donors.2[k])
markers.list[[k]] <- markers[-c(grep("^RPS", markers$gene),
grep("^RPL", markers$gene),
grep("^MT-", markers$gene),
grep("^MTR", markers$gene),
grep("MALAT1", markers$gene),
grep("^RNA18S5", markers$gene),
grep("^RNA28S5", markers$gene)),]
})
}
markers.list <- ldply(markers.list, data.frame)
markers.list.mat <- markers.list[markers.list$p_val_adj<p.cutoff,]
markers.list.mat <- markers.list.mat[,c("gene", "avg_logFC", "Donor")]
markers.list.mat <- reshape2::dcast(markers.list.mat, formula = gene~Donor, value.var = "avg_logFC")
markers.list.mat[is.na(markers.list.mat)] = 0
markers.list.mat <- markers.list.mat %>% column_to_rownames(var = "gene")
colnames(markers.list.mat) <- gsub("covid_", "", colnames(markers.list.mat))
return(markers.list.mat)
}
covid.markers.heatmap <- function(markers.matrix = NULL, color = c("blue", "white", "red"),
paletteLength = 100, fontsize_row = 10, color.rows = T,
title = "log(FC)", add.flag = T, de.cutoff = 4, top.n = NULL,
repel.degree = 0, legend = T, annotation_legend = T,
cellwidth = NA, cellheight = NA,
save = F, width = 7, height = 11, file = "~/Downloads/p.pdf") {
paletteLength = 100
if(sum(markers.matrix>=0)==dim(markers.matrix)[1]*dim(markers.matrix)[2]) {
color = color[2:3]
}
myColor = colorRampPalette(color)(paletteLength)
myBreaks <- unique(c(seq(min(markers.matrix), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(markers.matrix)/paletteLength, max(markers.matrix),
length.out=floor(paletteLength/2))))
annotation_colors = list(
Ventilated = c(ARDS="red3", NonVent=RColorBrewer::brewer.pal(9, "Oranges")[4]))
p <- pheatmap(markers.matrix, color = myColor, breaks = myBreaks,
heatmap_legend_param = list(title = title), angle_col = "90",
annotation_col = row_annotation, annotation_colors = annotation_colors, legend = legend,
annotation_legend = annotation_legend, fontsize_row = fontsize_row,
cellwidth = cellwidth, cellheight = cellheight)
if(color.rows){
markers.matrix <- markers.matrix[match(p$gtable$grobs[[5]]$label,rownames(markers.matrix)),]
p$gtable$grobs[[5]]$gp=gpar(col=ifelse((rowSums(markers.matrix))>0, "red", "blue"), fontsize = fontsize_row)
}
if(add.flag){
if(save){
pdf(file = file, width = width, height = height)
}
if(!is.null(top.n)) {
kept.labels <- names((abs(rowSums(markers.matrix)) %>% sort(decreasing = T))[1:top.n])
}
else {
kept.labels = names(rowSums(markers.matrix !=0)[rowSums(markers.matrix !=0)>=de.cutoff])
}
add.flag(p, kept.labels = kept.labels,
repel.degree = repel.degree)
if(save){
dev.off()
}
}
else{
p
}
}
build.cp.matrix <- function(compartment = NULL, by = "z", p.cutoff = 0.05, z.cutoff = T, top.n = 100, path = "/Volumes/GoogleDrive/My Drive/Blish Lab/00 - All Server Data and Folders/Aaron/Data/scRNA-seq/COVID/analyses/IPA/results/") {
files <- list.files(path)
files_import <- grep(paste0(compartment,".txt"),files,value = T)
donor_names <- gsub(paste0("_",compartment,".txt"),"",files_import)
donor_names <- gsub("covid_","",donor_names)
datalist = lapply(files_import, function(x)read_delim(paste0("/Volumes/GoogleDrive/My Drive/Blish Lab/00 - All Server Data and Folders/Aaron/Data/scRNA-seq/COVID/analyses/IPA/results/",x), "\t", escape_double = FALSE, trim_ws = TRUE, skip = 1))
datalist <- mapply(cbind, datalist, "Donor"=donor_names,SIMPLIFY = F)
datalist.df <- ldply(datalist,data.frame)
datalist.df$X6 <- NULL
colnames(datalist.df) <- mapvalues(colnames(datalist.df), from = c("Ingenuity.Canonical.Pathways",
"X.log.p.value.",
"Ratio",
"z.score",
"Molecules",
"Donor"),
to = c("Pathway",
"p",
"Ratio",
"z",
"Molecules",
"Donor"))
datalist.final <- datalist.df
if(!is.null(p.cutoff)){
p.converted = -log(0.05,10)
datalist.final <- datalist.final[datalist.final$p>p.converted,]
}
if(z.cutoff){
datalist.final <- datalist.final[!is.na(datalist.final$z),]
datalist.final <- datalist.final[!datalist.final$z==0,]
}
datalist.final[is.na(datalist.final$z),"z"] <- 0
datalist.mat <- reshape2::dcast(data = datalist.final, formula = Pathway~Donor,fun.aggregate = sum, value.var = by) %>% column_to_rownames(var = "Pathway")
if(by=="p" && z.cutoff){
datalist.z <- as.matrix(reshape2::dcast(data = datalist.final, formula = Pathway~Donor,fun.aggregate = sum, value.var = "z") %>% column_to_rownames(var = "Pathway"))
datalist.mat <- as.matrix(datalist.mat)
datalist.mat[datalist.z<0] <- -datalist.mat
datalist.mat <- as.data.frame(datalist.mat)
}
if(!is.null(top.n)) {
top <- names((abs(rowSums(datalist.mat)) %>% sort(decreasing = T))[1:top.n])
datalist.mat <- datalist.mat[rownames(datalist.mat) %in% top,]
}
colnames(datalist.mat) <- mapvalues(colnames(datalist.mat), from = c("555_1",
"555_2",
"556",
"557",
"558",
"559",
"560",
"561"),
to = c("C1 A",
"C1 B",
"C2",
"C3",
"C4",
"C5",
"C6",
"C7"))
return(datalist.mat)
}
build.ur.matrix <- function(compartment = NULL, by = "z", p.cutoff = 0.05, z.cutoff = T, top.n = 100, path = "/Volumes/GoogleDrive/My Drive/Blish Lab/00 - All Server Data and Folders/Aaron/Data/scRNA-seq/COVID/analyses/IPA/results/") {
files <- list.files(path)
files_import <- grep(paste0(compartment,".ur.txt"),files,value = T)
donor_names <- gsub(paste0("_",compartment,".ur.txt"),"",files_import)
donor_names <- gsub("covid_","",donor_names)
datalist = lapply(files_import, function(x)read_delim(paste0("/Volumes/GoogleDrive/My Drive/Blish Lab/00 - All Server Data and Folders/Aaron/Data/scRNA-seq/COVID/analyses/IPA/results/",x), "\t", escape_double = FALSE, trim_ws = TRUE, skip = 1))
datalist <- mapply(cbind, datalist, "Donor"=donor_names,SIMPLIFY = F)
datalist.df <- ldply(datalist,data.frame)
colnames(datalist.df) <- mapvalues(colnames(datalist.df), from = c("Upstream.Regulator",
"Expr.Log.Ratio",
"Molecule.Type",
"Predicted.Activation.State",
"Activation.z.score",
"p.value.of.overlap",
"Target.Molecules.in.Dataset",
"Mechanistic.Network",
"Donor",
"Flags"),
to = c("Regulator",
"Expr",
"Type",
"State",
"z",
"p",
"Molecules",
"Network",
"Donor",
"Flags"))
datalist.final <- datalist.df
if(!is.null(p.cutoff)){
datalist.final <- datalist.final[datalist.final$p<p.cutoff,]
}
if(z.cutoff){
datalist.final <- datalist.final[!is.na(datalist.final$z),]
datalist.final <- datalist.final[!datalist.final$z==0,]
}
datalist.final[is.na(datalist.final$z),"z"] <- 0
datalist.mat <- reshape2::dcast(data = datalist.final, formula = Regulator~Donor,fun.aggregate = sum, value.var = by) %>% column_to_rownames(var = "Regulator")
if(by=="p") {
datalist.mat <- -log(datalist.mat,10)
}
if(!is.null(top.n)) {
top <- names((abs(rowSums(datalist.mat)) %>% sort(decreasing = T))[1:top.n])
datalist.mat <- datalist.mat[rownames(datalist.mat) %in% top,]
}
colnames(datalist.mat) <- mapvalues(colnames(datalist.mat), from = c("555_1",
"555_2",
"556",
"557",
"558",
"559",
"560",
"561"),
to = c("C1 A",
"C1 B",
"C2",
"C3",
"C4",
"C5",
"C6",
"C7"))
return(datalist.mat)
}
new.markers.heatmap <- function(markers.matrix = NULL, fontsize_row = 10, color.rows = T,
title = "log(FC)", add.flag = T, de.cutoff = 4,
top.n = NULL,
repel.degree = 0, legend = T, annotation_legend = T,
cellwidth = NA, cellheight = NA,
save = T, width = 7, height = 11,
file = "~/Downloads/p.pdf") {
ta = columnAnnotation(Age = row_annotation$Age,
DPS = row_annotation$DPS,
DTF = row_annotation$DTF,
Admission = row_annotation$Admission,
ARDS = row_annotation$Ventilated,
col = list(ARDS = c("No" = "orange", "Yes" = "red"),
Admission = c("Floor" = "blue", "ICU" = "magenta")))
if(add.flag){
if(!is.null(top.n)) {
top.labels <- names((abs(rowSums(markers.matrix)) %>% sort(decreasing = T))[1:top.n])
kept.labels <- rownames(markers.matrix)[rownames(markers.matrix) %in% top.labels]
}
else {
kept.labels = names(rowSums(markers.matrix !=0)[rowSums(markers.matrix !=0)>=de.cutoff])
}
t = 1:nrow(markers.matrix)
ha = rowAnnotation(foo = anno_mark(at = t[rownames(markers.matrix) %in% kept.labels],
labels = kept.labels,
labels_gp = gpar(col =
ifelse((rowSums(markers.matrix[rownames(markers.matrix) %in% kept.labels,]))>0,
"red", "blue"))))
}
p <- Heatmap(markers.matrix, right_annotation = ha,
top_annotation = ta, row_names_gp = gpar(fontsize = 0))
if(save){
pdf(file = file, width = width, height = height)
p
#dev.off()
}
else {
p
}
}
processNewSeurat <- function(parent.object, idents = NULL, cells = NULL) {
if (!is.null(idents)) {
seu <- subset(parent.object, idents = idents)
}
if (!is.null(cells)) {
seu <- subset(parent.object, cells = cells)
}
message("Running PCA")
seu <- RunPCA(seu, verbose = FALSE)
message("Running UMAP")
seu <- RunUMAP(seu, dims = 1:50, verbose = FALSE)
message("Clustering")
seu <- FindNeighbors(seu, dims = 1:50, verbose = FALSE)
seu <- FindClusters(seu, resolution = 1, verbose = FALSE)
return(seu)
}
myFeaturePlot <- function(object = NULL, features = features, ncol = NULL, save = T, save.as = "png", height = 7, width = 7, cols = c("lightgrey", "blue")) {
plots <- lapply(features, function(x) {FeaturePlot(object,features = x, cols = cols) +  labs(x = "UMAP1", y = "UMAP2") + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title = element_blank(), axis.line = element_blank())})
CombinePlots(plots = plots, ncol = ncol)
if(save) {
if(save.as=="pdf"){
ggsave("p.pdf", path = "~/Downloads/", height = height, width = width)
}
if(save.as=="png"){
ggsave("p.png", path = "~/Downloads/", height = height, width = width)
}
}
}
myHighlightCells <- function(object = NULL, idents = NULL, group_by = "seurat_clusters", ncol = NULL, save = T, height = 7, width = 7, col = "black") {
cells.highlight=list()
for(i in 1:length(idents)){
cells = colnames(object)[grep(idents[i], object@meta.data[,group_by])]
cells.highlight[[i]]=cells
}
plots <- lapply(cells.highlight, function(x) {
DimPlot(object,cells.highlight = x, cols.highlight = col) +
NoLegend() + labs(x = "UMAP1", y = "UMAP2") +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title = element_blank(), axis.line = element_blank())
})
CombinePlots(plots = plots, ncol = ncol)
if(save) {
ggsave("p.pdf", path = "~/Downloads/", height = height, width = width)
}
}
constructConsensus <- function(markers.matrix, donors.use = 1:8, save = T, height = 5, width = 7) {
markers.matrix.m <- markers.matrix %>% rownames_to_column(var = "gene")
markers.matrix.m <- reshape2::melt(markers.matrix.m)
order.markers <- rownames(markers.matrix[order(rowSums(-markers.matrix)),])
markers.sum <- as.data.frame(ifelse(markers.matrix != 0, 1, 0))
markers.sum$total <- rowSums(markers.sum)
keep <- rownames(markers.sum[markers.sum$total>3,])
markers.matrix.m <- markers.matrix.m[markers.matrix.m$gene %in% keep,]
ggplot(markers.matrix.m, aes(x = factor(gene, level = order.markers),
y = value, fill = variable)) +
geom_bar(stat="identity", color = "black", size = 0.25) + theme_minimal() +
labs(x = "", y = "Cumulative average log(fold-change)", fill = "Sample") +
scale_fill_manual(values = custom_fill_colors[donors.use]) +
ggpubr::rotate_x_text()
if(save){
ggsave("p.pdf", path = "~/Downloads/", height = height, width = width)
}
}
library(Matrix)
library(Matrix.utils)
install.packages("Matrix.utils")
library(Matrix)
library(Matrix.utils)
library(plyr)
install.packages("plyr")
library(Matrix)
library(Matrix.utils)
library(plyr)
library(dplyr)
install.packages("dplyr")
install.packages("Seurat")
install.packages("sctransform", "igraph")
install.packages("sctransform")
install.packages("igraph")
install.packages("factoextra")
install.packages("ComplexHearmap")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
install.packages("circlize")
install.packages("EpicTools")
install.packages("Hmisc")
install.packages("openxlsx")
install.packages("ggplot2")
install.packages("remotes")
remotes::install_github("ajwilk/EpicTools")
install.packages("ggpubr")
library(Matrix)
library(Matrix.utils)
library(plyr)
library(dplyr)
library(Seurat)
library(sctransform)
library(igraph)
library(factoextra)
library(ComplexHeatmap)
library(circlize)
library(EpicTools)
require(Hmisc)
require(dplyr)
require(openxlsx)
require(ggplot2)
library(ggpubr)
require(cowplot)
library(data.table)
library(RColorBrewer)
library(rowr)
install.packages("rowr")
install.packages("remotes")
remotes::install_github("cvarrichio/rowr")
install.packages("remotes")
remotes::install_github("cvarrichio/rowr")
remotes::install_github("cvarrichio/rowr")
library(rowr)
library(Matrix)
library(Matrix.utils)
library(plyr)
library(dplyr)
library(Seurat)
library(sctransform)
library(igraph)
library(factoextra)
library(ComplexHeatmap)
library(circlize)
library(EpicTools)
require(Hmisc)
require(dplyr)
require(openxlsx)
require(ggplot2)
library(ggpubr)
require(cowplot)
library(data.table)
library(RColorBrewer)
library(rowr)
library(SingleR)
install.packages("SingleR")
remotes::install_github("cvarrichio/rowr")
remotes::install_github("dviraran/SingleR")
if (!requireNamespace ("BiocManager", quietly = TRUE))
install.packages ("BiocManager")
BiocManager::install ("SingleR")
library(Matrix)
library(Matrix.utils)
library(plyr)
library(dplyr)
library(Seurat)
library(sctransform)
library(igraph)
library(factoextra)
library(ComplexHeatmap)
library(circlize)
library(EpicTools)
require(Hmisc)
require(dplyr)
require(openxlsx)
require(ggplot2)
library(ggpubr)
require(cowplot)
library(data.table)
library(RColorBrewer)
library(rowr)
library(SingleR)
library(scater)
install.packages("scater")
BiocManager::install ("scater")
library(Matrix)
library(Matrix.utils)
library(plyr)
library(dplyr)
library(Seurat)
library(sctransform)
library(igraph)
library(factoextra)
library(ComplexHeatmap)
library(circlize)
library(EpicTools)
require(Hmisc)
require(dplyr)
require(openxlsx)
require(ggplot2)
library(ggpubr)
require(cowplot)
library(data.table)
library(RColorBrewer)
library(rowr)
library(SingleR)
library(scater)
install.packages("scater")
library(Matrix)
library(Matrix.utils)
library(plyr)
library(dplyr)
library(Seurat)
library(sctransform)
library(igraph)
library(factoextra)
library(ComplexHeatmap)
library(circlize)
library(EpicTools)
require(Hmisc)
require(dplyr)
require(openxlsx)
require(ggplot2)
library(ggpubr)
require(cowplot)
library(data.table)
library(RColorBrewer)
library(rowr)
library(SingleR)
# library(scater)
library(pheatmap)
BiocManager::install ("pheatmap")
# library(scater)
library(pheatmap)
library(nichenetr)
BiocManager::install ("nichenetr")
BiocManager::install ("tidyverse")
library(nichenetr)
library(tidyverse)
path = "/Users/lyz9518/Documents/GitHub/2020_Wilk_COVID_Sal/data/count_matrices/"
# path = "C:/Users/smcar/intro to genomic info/Final Project/2020_Wilk_COVID/data/count_matrices/"
cm.list = paste0(path, list.files(pattern = "*.matrices.rds", path = path))
cm.files <- lapply(cm.list, readRDS)
names(cm.files) <- sub(path,"",
sub("\\_cell.counts.matrices.rds", "", cm.list))
cm.pp <- mapply(EpicPreHS, cm.files, orig.ident = names(cm.files), SIMPLIFY = F)
covid_combined.emat <- mergeCM(cm.pp, type = "emat")
covid_combined.nmat <- mergeCM(cm.pp, type = "nmat")
covid_combined <- CreateSeuratObject(counts = covid_combined.emat, min.cells = 10, names.field = 1, names.delim = "\\.")
covid_combined <- PercentageFeatureSet(covid_combined, pattern = "^MT-", col.name = "percent.mt")
covid_combined <- PercentageFeatureSet(covid_combined, pattern = "^RPS", col.name = "percent.rps")
covid_combined <- PercentageFeatureSet(covid_combined, pattern = "^RPL", col.name = "percent.rpl")
covid_combined <- PercentageFeatureSet(covid_combined, pattern = "^RNA\\d8S5", col.name = "percent.rrna")
covid_combined <- SCTransform(covid_combined, vars.to.regress = c("percent.mt", "percent.rps", "percent.rpl", "percent.rrna", "nCount_RNA", "nFeature_RNA"), verbose = FALSE, return.only.var.genes = TRUE) #expect "iteration limit reached" warning unless suppressed per https://github.com/satijalab/seurat/issues/1426
covid_combined <- CreateSeuratObject(counts = covid_combined.emat, min.cells = 10, names.field = 1, names.delim = "\\.")
covid_combined <- PercentageFeatureSet(covid_combined, pattern = "^MT-", col.name = "percent.mt")
covid_combined <- PercentageFeatureSet(covid_combined, pattern = "^RPS", col.name = "percent.rps")
covid_combined <- PercentageFeatureSet(covid_combined, pattern = "^RPL", col.name = "percent.rpl")
covid_combined <- PercentageFeatureSet(covid_combined, pattern = "^RNA\\d8S5", col.name = "percent.rrna")
covid_combined <- SCTransform(covid_combined, vars.to.regress = c("percent.mt", "percent.rps", "percent.rpl", "percent.rrna", "nCount_RNA", "nFeature_RNA"), verbose = FALSE, return.only.var.genes = TRUE) #expect "iteration limit reached" warning unless suppressed per https://github.com/satijalab/seurat/issues/1426
