q()
.libPaths()
myPaths <- .libPaths()   # get the paths
myPaths <- c(myPaths[2], myPaths[1])  # switch them
.libPaths(myPaths)  # reassign them
myPaths <- .libPaths()   # get the paths
myPaths <- c(myPaths[2], myPaths[1])  # switch them
.libPaths(myPaths)  # reassign them
myPaths <- .libPaths()   # get the paths
myPaths <- c(myPaths[2], myPaths[1])  # switch them
.libPaths(myPaths)  # reassign them
.libPaths()
BiocManager::install(version="3.13")
BiocManager::install(c('BiocGenerics','DelayedArray','DelayedMatrixStats','limma','S4Vectors','SingleCellExperiment','SummarizedExperiment','batchelor','Matrix.utils'))
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/leidenbase')devtools::install_github('cole-trapnell-lab/monocle3')
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/monocle3')
library(monocle3)
library(Seurat)
DotPlot()
# install required CRAN packages
for (pkg in c("BiocManager", "data.table", "httr", "FactoMineR", "dendextend", "googledrive", "statmod")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
# install required Bioc packages
for (pkg in c("limma", "edgeR", "GO.db", "org.Hs.eg.db")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
BiocManager::install(pkg, update = FALSE, ask = FALSE)
}
}
library(googledrive)
# You'll need to open the browser for authentication similar to what we did in
# colab
drive_auth()
# Get the file object in google drive using its unique ID
count_file <- drive_get(as_id("1ed9J_SVdcDzO-vyzMKPOj7wJK1KNPEDr"))
meta_file <- drive_get(as_id("1frE6xQ783iLp20dHKv-eYfah7GJzu29Q"))
# download the file to your system
dir.create("data")
drive_download(count_file, path=file.path("data", count_file$name))
library(data.table)
# change the file path to where you download the count table
DATA <- "C:/Users/smcar/intro to genomic info/data"
count_file_path <- "GSE157103_genes.ec.tsv.gz"
meta_file_path <- "GSE157103_metadata.txt"
# load the count table, set check.names to FALSE so R doesn't rename your columns!
rc <- data.frame(fread(file.path(DATA, count_file_path)),
row.names = 1, check.names = FALSE)
meta <- read.table(file.path(DATA, meta_file_path),
sep = "\t", check.names = FALSE, row.names=1,
stringsAsFactors = FALSE, header = TRUE)
# Create matching IDs using the prefix of sample_title column in meta
meta[, "sample_id"] <- paste0(substr(rownames(meta), 1, 1),
sapply(strsplit(rownames(meta), "_"), function(x){x[2]}) )
# In the rc file the label is `C` vs `NC`, we need to change `N` to `NC` in meta sample_id
meta[, "sample_id"] <- gsub("C0", "C", gsub("N", "NC", meta$sample_id))
# make sure the two table have the same IDs
if (!all(meta$sample_id %in% colnames(rc))) {
stop("The sample_id in metadata does not fully match the colnames in rc!!")
}
# Convert age ">89" as 90
meta[, "age"] <- as.numeric(meta$`age_(years)`)
meta[meta$`age_(years)` == ">89", "age"] <- 90
# impute the missing age using the average
meta[is.na(meta$age), "age"] <- mean(meta$age, na.rm=TRUE)
# We are only interested in the COVID-19 patients
meta <- meta[meta$disease_state == "COVID-19", ]
# Align expression matrix column order and the meta data row order
rc <- rc[, meta[, "sample_id"]]
# define severity of the patients according to HFD-45
meta["severity"] <- ifelse(
meta$`hospital-free_days_post_45_day_followup_(days)` < 25,
"severe", "mild"
)
library(edgeR)
dgelist <- DGEList(rc, remove.zeros = T, genes=rownames(rc), group=NULL)
design <- model.matrix(~ severity + age + Sex, data=meta)
keep <- filterByExpr(dgelist, design=design)
dgelist <- dgelist[keep,,keep.lib.sizes=FALSE]
dgelist <- calcNormFactors(dgelist, method="TMM")
head(dgelist$samples)
dgelist <- estimateDisp(dgelist, design)
plotBCV(dgelist)
dgelist2 <- DGEList(rc, remove.zeros = T, genes=rownames(rc), group=meta$severity)
keep <- filterByExpr(dgelist2, design=design)
dgelist2 <- dgelist2[keep,,keep.lib.sizes=FALSE]
dgelist2 <- calcNormFactors(dgelist2, method="TMM")
head(dgelist2$samples)
dgelist2 <- estimateDisp(dgelist2, design)
plotBCV(dgelist2)
colors = c()
colors = c()
x = dgelist2$samples$group
for (p in x){
if (p == "mild"){
colors <- append(colors,"black")
}
if (p == "severe"){
colors <- append(colors,"red")
}
}
plotMDS(dgelist2,labels = dgelist2$samples$group,col=colors)
plotMDS(dgelist2,labels = dgelist2$samples$group,col=colors,pch = 1)
plotMDS(dgelist2,col=colors,pch = 1)
plotMDS(dgelist2,labels = dgelist2$samples$group,col=colors,pch = 1)
#=========================================================================
design2 <- model.matrix(~ severity, data=meta)
View(design2)
dgelist$samples
dgelist2$samples
plotMDS(dgelist2,labels = dgelist2$samples$group,col=colors)
View(design2)
View(design)
design <- model.matrix(~ severity + age + Sex, data=meta)
#=========================================================================
fit <- glmQLFit(dgelist2, design)
View(fit)
qlf <- glmQLFTest(fit,coef = 2)
toptags <- as.data.frame(topTags(qlf),n=Inf)
toptags
#============================================
logcpm <- cpm(dgelist, log=TRUE)
boxplot(logcpm["PGD", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="PGD log2CPM")
stripchart(logcpm["PGD", colnames(rc)] ~ meta$severity,
vertical = TRUE, method = "jitter", pch = 16, col = "black", add = TRUE)
boxplot(logcpm["PGD", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="PGD log2CPM")
stripchart(logcpm["PGD", colnames(rc)] ~ meta$severity,
vertical = TRUE, method = "jitter", pch = 16, col = "black", add = TRUE)
boxplot(logcpm["PGD", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="PGD log2CPM")
stripchart(logcpm["PGD", colnames(rc)] ~ meta$severity,
vertical = TRUE, method = "jitter", pch = 16, col = "black", add = TRUE)
boxplot(logcpm["CNTNAP1", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="PGD log2CPM")
boxplot(logcpm["CNTNAP1", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="PGD log2CPM")
stripchart(logcpm["PGD", colnames(rc)] ~ meta$severity,
vertical = TRUE, method = "jitter", pch = 16, col = "black", add = TRUE)
boxplot(logcpm["CNTNAP1", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="PGD log2CPM")
stripchart(logcpm["PGD", colnames(rc)] ~ meta$severity,
vertical = TRUE, method = "jitter", pch = 16, col = "black", add = TRUE)
boxplot(logcpm["S100A12", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="PGD log2CPM")
boxplot(logcpm["PGD", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="PGD log2CPM")
boxplot(logcpm["PGD", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="PGD log2CPM")
stripchart(logcpm["PGD", colnames(rc)] ~ meta$severity,
vertical = TRUE, method = "jitter", pch = 16, col = "black", add = TRUE)
library(httr)
GENE_SYM_ID_LINK_BASE <- "https://www.genenames.org/cgi-bin/download/custom?col=gd_app_sym&col=gd_pub_eg_id&status=Approved&hgnc_dbtag=on&order_by=gd_app_sym_sort&format=text&submit=submit"
response <- GET(GENE_SYM_ID_LINK_BASE)
library(edgeR)
dgelist <- DGEList(rc, remove.zeros = T, genes=rownames(rc), group=NULL)
design <- model.matrix(~ severity + age + Sex, data=meta)
keep <- filterByExpr(dgelist, design=design)
dgelist <- dgelist[keep,,keep.lib.sizes=FALSE]
dgelist <- calcNormFactors(dgelist, method="TMM")
head(dgelist$samples)
dgelist <- estimateDisp(dgelist, design)
plotBCV(dgelist)
qlf <- glmQLFTest(fit)
toptags <- as.data.frame(topTags(qlf),n=Inf)
toptags
qlf <- glmQLFTest(fit,coef = ncol(design))
toptags <- as.data.frame(topTags(qlf),n=Inf)
toptags
boxplot(logcpm["TMSB4Y", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="TMSB4Y log2CPM")
ncol(design)
qlf <- glmQLFTest(fit,coef = 3)
toptags <- as.data.frame(topTags(qlf),n=Inf)
toptags
boxplot(logcpm["RFESD", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="TMSB4Y log2CPM")
qlf <- glmQLFTest(fit,coef = 2)
qlf <- glmQLFTest(fit,coef = 2)
toptags <- as.data.frame(topTags(qlf),n=Inf)
toptags <- as.data.frame(topTags(qlf),n=Inf)
toptags
boxplot(logcpm["PCMT1", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="TMSB4Y log2CPM")
qlf <- glmQLFTest(fit,coef = 5)
qlf <- glmQLFTest(fit,coef = 0)
toptags <- as.data.frame(topTags(qlf),n=Inf)
toptags
qlf <- glmQLFTest(fit,coef = 2)
toptags <- as.data.frame(topTags(qlf),n=Inf)
toptags
qlf <- glmQLFTest(fit,coef = 0)
toptags <- as.data.frame(topTags(qlf),n=Inf)
toptags
boxplot(logcpm["PLP2", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="TMSB4Y log2CPM")
#=========================================================================
fit <- glmQLFit(dgelist2, design2)
qlf <- glmQLFTest(fit,coef = ncol(design2))
toptags <- as.data.frame(topTags(qlf),n=Inf)
toptags
#============================================
logcpm <- cpm(dgelist2, log=TRUE)
PGD
# install required CRAN packages
for (pkg in c("BiocManager", "data.table", "httr", "FactoMineR", "dendextend", "googledrive", "statmod")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
# install required Bioc packages
for (pkg in c("limma", "edgeR", "GO.db", "org.Hs.eg.db")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
BiocManager::install(pkg, update = FALSE, ask = FALSE)
}
}
library(googledrive)
# You'll need to open the browser for authentication similar to what we did in
# colab
drive_auth()
# Get the file object in google drive using its unique ID
count_file <- drive_get(as_id("1ed9J_SVdcDzO-vyzMKPOj7wJK1KNPEDr"))
meta_file <- drive_get(as_id("1frE6xQ783iLp20dHKv-eYfah7GJzu29Q"))
# download the file to your system
dir.create("data")
drive_download(count_file, path=file.path("data", count_file$name))
count_file_path <- "GSE157103_genes.ec.tsv.gz"
library(data.table)
# change the file path to where you download the count table
DATA <- "C:/Users/smcar/intro to genomic info/data"
count_file_path <- "GSE157103_genes.ec.tsv.gz"
meta_file_path <- "GSE157103_metadata.txt"
# load the count table, set check.names to FALSE so R doesn't rename your columns!
rc <- data.frame(fread(file.path(DATA, count_file_path)),
row.names = 1, check.names = FALSE)
meta <- read.table(file.path(DATA, meta_file_path),
sep = "\t", check.names = FALSE, row.names=1,
stringsAsFactors = FALSE, header = TRUE)
# Create matching IDs using the prefix of sample_title column in meta
meta[, "sample_id"] <- paste0(substr(rownames(meta), 1, 1),
sapply(strsplit(rownames(meta), "_"), function(x){x[2]}) )
# In the rc file the label is `C` vs `NC`, we need to change `N` to `NC` in meta sample_id
meta[, "sample_id"] <- gsub("C0", "C", gsub("N", "NC", meta$sample_id))
# make sure the two table have the same IDs
if (!all(meta$sample_id %in% colnames(rc))) {
stop("The sample_id in metadata does not fully match the colnames in rc!!")
}
# Convert age ">89" as 90
meta[, "age"] <- as.numeric(meta$`age_(years)`)
meta[meta$`age_(years)` == ">89", "age"] <- 90
# impute the missing age using the average
meta[is.na(meta$age), "age"] <- mean(meta$age, na.rm=TRUE)
# We are only interested in the COVID-19 patients
meta <- meta[meta$disease_state == "COVID-19", ]
# Align expression matrix column order and the meta data row order
rc <- rc[, meta[, "sample_id"]]
# define severity of the patients according to HFD-45
meta["severity"] <- ifelse(
meta$`hospital-free_days_post_45_day_followup_(days)` < 25,
"severe", "mild"
)
#==================================================
library(edgeR)
dgelist <- DGEList(rc, remove.zeros = T, genes=rownames(rc), group=NULL)
design <- model.matrix(~ severity + age + Sex, data=meta)
keep <- filterByExpr(dgelist, design=design)
dgelist <- dgelist[keep,,keep.lib.sizes=FALSE]
dgelist <- calcNormFactors(dgelist, method="TMM")
head(dgelist$samples)
dgelist <- estimateDisp(dgelist, design)
plotBCV(dgelist)
#==================================================
design2 <- model.matrix(~ severity, data=meta)
keep <- filterByExpr(dgelist2, design=design2)
dgelist2 <- DGEList(rc, remove.zeros = T, genes=rownames(rc), group=meta$severity)
design2 <- model.matrix(~ severity, data=meta)
View(dgelist2)
View(dgelist)
keep <- filterByExpr(dgelist2, design=design2)
dgelist2 <- dgelist2[keep,,keep.lib.sizes=FALSE]
dgelist2 <- calcNormFactors(dgelist2, method="TMM")
head(dgelist2$samples)
dgelist2 <- estimateDisp(dgelist2, design)
colors = c()
x = dgelist2$samples$group
for (p in x){
if (p == "mild"){
colors <- append(colors,"black")
}
if (p == "severe"){
colors <- append(colors,"red")
}
}
dgelist2 <- estimateDisp(dgelist2, design2)
View(dgelist2)
View(dgelist)
View(dgelist2)
View(dgelist)
View(meta)
View(design)
View(design)
View(dgelist)
View(dgelist2)
library(data.table)
# change the file path to where you download the count table
DATA <- "C:/Users/smcar/intro to genomic info/data"
count_file_path <- "GSE157103_genes.ec.tsv.gz"
meta_file_path <- "GSE157103_metadata.txt"
# load the count table, set check.names to FALSE so R doesn't rename your columns!
rc <- data.frame(fread(file.path(DATA, count_file_path)),
row.names = 1, check.names = FALSE)
meta <- read.table(file.path(DATA, meta_file_path),
sep = "\t", check.names = FALSE, row.names=1,
stringsAsFactors = FALSE, header = TRUE)
# Create matching IDs using the prefix of sample_title column in meta
meta[, "sample_id"] <- paste0(substr(rownames(meta), 1, 1),
sapply(strsplit(rownames(meta), "_"), function(x){x[2]}) )
# In the rc file the label is `C` vs `NC`, we need to change `N` to `NC` in meta sample_id
meta[, "sample_id"] <- gsub("C0", "C", gsub("N", "NC", meta$sample_id))
# make sure the two table have the same IDs
if (!all(meta$sample_id %in% colnames(rc))) {
stop("The sample_id in metadata does not fully match the colnames in rc!!")
}
# Convert age ">89" as 90
meta[, "age"] <- as.numeric(meta$`age_(years)`)
meta[meta$`age_(years)` == ">89", "age"] <- 90
# impute the missing age using the average
meta[is.na(meta$age), "age"] <- mean(meta$age, na.rm=TRUE)
# We are only interested in the COVID-19 patients
meta <- meta[meta$disease_state == "COVID-19", ]
# Align expression matrix column order and the meta data row order
rc <- rc[, meta[, "sample_id"]]
# define severity of the patients according to HFD-45
meta["severity"] <- ifelse(
meta$`hospital-free_days_post_45_day_followup_(days)` < 25,
"severe", "mild"
)
#==================================================
library(edgeR)
dgelist <- DGEList(rc, remove.zeros = T, genes=rownames(rc), group=NULL)
design <- model.matrix(~ severity + age + Sex, data=meta)
keep <- filterByExpr(dgelist, design=design)
dgelist <- dgelist[keep,,keep.lib.sizes=FALSE]
dgelist <- calcNormFactors(dgelist, method="TMM")
head(dgelist$samples)
dgelist <- estimateDisp(dgelist, design)
plotBCV(dgelist)
#==================================================
#======================================================================
dgelist2 <- DGEList(rc, remove.zeros = T, genes=rownames(rc), group=meta$severity)
keep <- filterByExpr(dgelist2, design=design)
dgelist2 <- dgelist2[keep,,keep.lib.sizes=FALSE]
dgelist2 <- calcNormFactors(dgelist2, method="TMM")
head(dgelist2$samples)
dgelist2 <- estimateDisp(dgelist2, design)
colors = c()
x = dgelist2$samples$group
for (p in x){
if (p == "mild"){
colors <- append(colors,"black")
}
if (p == "severe"){
colors <- append(colors,"red")
}
}
plotMDS(dgelist2,labels = dgelist2$samples$group,col=colors)
#======================================================================
meta$severity
ncol(meta$severity)
qlf <- glmQLFTest(fit,coef = c(-1,1))
#=========================================================================
fit <- glmQLFit(dgelist2, design)
qlf <- glmQLFTest(fit,coef = c(-1,1))
colnames(fit)
ncol(fit)
fit <- glmQLFit(dgelist2, design)
qlf <- glmQLFTest(fit,coef = 2)
toptags <- as.data.frame(topTags(qlf),n=Inf)
toptags
#============================================
logcpm <- cpm(dgelist2, log=TRUE)
boxplot(logcpm["PGD", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="PGD log2CPM")
boxplot(logcpm["PGD", colnames(rc)] ~ meta$severity, outpch=NA,
col="dodgerblue4", xlab="severity", ylab="PGD log2CPM")
stripchart(logcpm["PGD", colnames(rc)] ~ meta$severity,
vertical = TRUE, method = "jitter", pch = 16, col = "black", add = TRUE)
GENE_SYM_ID_LINK_BASE <- "https://www.genenames.org/cgi-bin/download/custom?col=gd_app_sym&col=gd_pub_eg_id&status=Approved&hgnc_dbtag=on&order_by=gd_app_sym_sort&format=text&submit=submit"
response <- GET(GENE_SYM_ID_LINK_BASE)
gene_sym_id <- data.frame(fread(text=httr::content(response, "parsed"), header=TRUE))
colnames(gene_sym_id) <- c("gene_symbol","gene_id")
gene_sym_id <- gene_sym_id[apply(gene_sym_id == "PGD", 1, sum) == 0,]
gene_sym_id <- gene_sym_id[apply(is.na(gene_sym_id), 1, sum) == 0,]
gene_sym_id <- gene_sym_id[!duplicated(gene_sym_id$gene_id), ]
rownames(gene_sym_id) <- gene_sym_id$gene_symbol
go_res <- goana(qlf, geneid=gene_sym_id[rownames(qlf), "gene_id"])
topGO(go_res)
sample_colors <- ifelse(dgelist2$samples$group, "maroon", "navy")
update.packages("xfun")
update.packages('xfun')
